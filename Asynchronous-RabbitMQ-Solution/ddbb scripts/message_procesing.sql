-- Crear tabla para registrar eventos publicados
CREATE TABLE TRANSACTION_MGMT.ASYNCH_EVENTS (
    EVENT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EVENT_TYPE VARCHAR2(50) NOT NULL,
    PAYLOAD CLOB NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'PENDING' CHECK (STATUS IN ('PENDING', 'PUBLISHED', 'FAILED')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    RETRY_COUNT NUMBER DEFAULT 0
);

-- Crear tabla para registrar eventos fallidos en la DLQ
CREATE TABLE TRANSACTION_MGMT.ASYNCH_DLQ_EVENTS (
    DLQ_EVENT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EVENT_ID NUMBER NOT NULL,
    EVENT_TYPE VARCHAR2(50) NOT NULL,
    PAYLOAD CLOB NOT NULL,
    ERROR_MESSAGE VARCHAR2(4000),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (EVENT_ID) REFERENCES TRANSACTION_MGMT.EVENTS(EVENT_ID) ON DELETE CASCADE
);

-- Crear tabla para el consumo de mensajes
CREATE TABLE TRANSACTION_MGMT.ASYNCH_CONSUMED_EVENTS (
    CONSUMED_EVENT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    EVENT_ID NUMBER NOT NULL,
    EVENT_TYPE VARCHAR2(50) NOT NULL,
    PAYLOAD CLOB NOT NULL,
    CONSUMED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (EVENT_ID) REFERENCES TRANSACTION_MGMT.EVENTS(EVENT_ID) ON DELETE CASCADE
);

-- Índices para optimizar las consultas
CREATE INDEX IDX_EVENTS_STATUS ON TRANSACTION_MGMT.EVENTS (STATUS);
CREATE INDEX IDX_DLQ_EVENTS_TYPE ON TRANSACTION_MGMT.DLQ_EVENTS (EVENT_TYPE);

-- Procedimiento para publicar eventos
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.PUBLISH_EVENT(
    P_EVENT_TYPE IN VARCHAR2,
    P_PAYLOAD IN CLOB
) AS
BEGIN
    -- Registrar el evento como pendiente
    INSERT INTO TRANSACTION_MGMT.EVENTS (EVENT_TYPE, PAYLOAD, STATUS)
    VALUES (P_EVENT_TYPE, P_PAYLOAD, 'PENDING');

    -- Aquí se integraría la lógica para publicar en RabbitMQ
    -- Simulamos el cambio de estado
    UPDATE TRANSACTION_MGMT.EVENTS
    SET STATUS = 'PUBLISHED'
    WHERE EVENT_TYPE = P_EVENT_TYPE
    AND PAYLOAD = P_PAYLOAD;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PUBLISH_EVENT;

-- Procedimiento para manejar eventos fallidos (DLQ)
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.HANDLE_FAILED_EVENT(
    P_EVENT_ID IN NUMBER,
    P_ERROR_MESSAGE IN VARCHAR2
) AS
    V_EVENT_TYPE VARCHAR2(50);
    V_PAYLOAD CLOB;
BEGIN
    -- Obtener datos del evento fallido
    SELECT EVENT_TYPE, PAYLOAD INTO V_EVENT_TYPE, V_PAYLOAD
    FROM TRANSACTION_MGMT.EVENTS
    WHERE EVENT_ID = P_EVENT_ID;

    -- Registrar el evento en la DLQ
    INSERT INTO TRANSACTION_MGMT.DLQ_EVENTS (EVENT_ID, EVENT_TYPE, PAYLOAD, ERROR_MESSAGE)
    VALUES (P_EVENT_ID, V_EVENT_TYPE, V_PAYLOAD, P_ERROR_MESSAGE);

    -- Actualizar estado del evento original a 'FAILED'
    UPDATE TRANSACTION_MGMT.EVENTS
    SET STATUS = 'FAILED'
    WHERE EVENT_ID = P_EVENT_ID;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE

-- Crear tabla para los usuarios
CREATE TABLE TRANSACTION_MGMT.USERS (
    USER_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    USERNAME VARCHAR2(100) NOT NULL UNIQUE,
    PASSWORD_HASH VARCHAR2(500) NOT NULL, -- Hash de la contraseña
    ROLE VARCHAR2(50) CHECK (ROLE IN ('USER', 'ADMIN')) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LAST_LOGIN TIMESTAMP
);

-- Crear tabla para almacenar tokens JWT
CREATE TABLE TRANSACTION_MGMT.JWT_TOKENS (
    TOKEN_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    JWT_TOKEN CLOB NOT NULL,
    EXPIRES_AT TIMESTAMP NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES TRANSACTION_MGMT.USERS(USER_ID) ON DELETE CASCADE
);

-- Crear tabla para auditoría de accesos y eventos
CREATE TABLE TRANSACTION_MGMT.AUDIT_LOG (
    AUDIT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    ACTION_TYPE VARCHAR2(50) NOT NULL,  -- Ej: 'LOGIN', 'TRANSFER', 'WITHDRAWAL'
    ACTION_DESCRIPTION VARCHAR2(4000),
    TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IP_ADDRESS VARCHAR2(50),
    FOREIGN KEY (USER_ID) REFERENCES TRANSACTION_MGMT.USERS(USER_ID)
);

-- Crear índice para optimizar consultas de auditoría
CREATE INDEX IDX_AUDIT_LOG_USER ON TRANSACTION_MGMT.AUDIT_LOG (USER_ID);

-- Crear procedimiento para registrar usuarios
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.REGISTER_USER(
    P_USERNAME IN VARCHAR2,
    P_PASSWORD_HASH IN VARCHAR2, -- Hash de la contraseña
    P_ROLE IN VARCHAR2
) AS
BEGIN
    -- Registrar el usuario
    INSERT INTO TRANSACTION_MGMT.USERS (USERNAME, PASSWORD_HASH, ROLE)
    VALUES (P_USERNAME, P_PASSWORD_HASH, P_ROLE);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END REGISTER_USER;

-- Crear procedimiento para registrar logins
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.RECORD_LOGIN(
    P_USER_ID IN NUMBER,
    P_IP_ADDRESS IN VARCHAR2
) AS
BEGIN
    -- Registrar evento de login
    INSERT INTO TRANSACTION_MGMT.AUDIT_LOG (USER_ID, ACTION_TYPE, ACTION_DESCRIPTION, IP_ADDRESS)
    VALUES (P_USER_ID, 'LOGIN', 'User logged in', P_IP_ADDRESS);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END RECORD_LOGIN;

-- Crear procedimiento para registrar acciones del usuario (ej. transferencias, retiros)
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.RECORD_USER_ACTION(
    P_USER_ID IN NUMBER,
    P_ACTION_TYPE IN VARCHAR2,
    P_ACTION_DESCRIPTION IN VARCHAR2,
    P_IP_ADDRESS IN VARCHAR2
) AS
BEGIN
    -- Registrar acción del usuario
    INSERT INTO TRANSACTION_MGMT.AUDIT_LOG (USER_ID, ACTION_TYPE, ACTION_DESCRIPTION, IP_ADDRESS)
    VALUES (P_USER_ID, P_ACTION_TYPE, P_ACTION_DESCRIPTION, P_IP_ADDRESS);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END RECORD_USER_ACTION;

-- Crear procedimiento para generar un informe de auditoría de acciones de usuarios
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.GENERATE_AUDIT_REPORT(
    P_USER_ID IN NUMBER
) AS
    CURSOR audit_cursor IS
        SELECT ACTION_TYPE, ACTION_DESCRIPTION, TIMESTAMP, IP_ADDRESS
        FROM TRANSACTION_MGMT.AUDIT_LOG
        WHERE USER_ID = P_USER_ID
        ORDER BY TIMESTAMP DESC;
    
    audit_record audit_cursor%ROWTYPE;
BEGIN
    OPEN audit_cursor;
    LOOP
        FETCH audit_cursor INTO audit_record;
        EXIT WHEN audit_cursor%NOTFOUND;
        -- Aquí se podría enviar el informe por correo o generarlo en un archivo
        DBMS_OUTPUT.PUT_LINE('Action: ' || audit_record.ACTION_TYPE || ', Description: ' || audit_record.ACTION_DESCRIPTION || ', Time: ' || audit_record.TIMESTAMP || ', IP: ' || audit_record.IP_ADDRESS);
    END LOOP;
    CLOSE audit_cursor;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END GENERATE_AUDIT_REPORT;

-- Crear procedimiento para generar el token JWT
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.GENERATE_JWT_TOKEN(
    P_USER_ID IN NUMBER,
    P_JWT_TOKEN OUT CLOB,
    P_EXPIRY_TIME IN TIMESTAMP
) AS
BEGIN
    -- Aquí se implementaría la lógica para generar el JWT token (utilizando alguna librería externa o función de base de datos).
    -- Por simplicidad, se coloca un ejemplo de token
    P_JWT_TOKEN := 'JWT_TOKEN_EXAMPLE';

    -- Almacenar el token generado en la base de datos
    INSERT INTO TRANSACTION_MGMT.JWT_TOKENS (USER_ID, JWT_TOKEN, EXPIRES_AT)
    VALUES (P_USER_ID, P_JWT_TOKEN, P_EXPIRY_TIME);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END GENERATE_JWT_TOKEN;

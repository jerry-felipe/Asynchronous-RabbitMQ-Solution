-- Crear esquema
CREATE USER TRANSACTION_MGMT IDENTIFIED BY strongpassword;
GRANT CONNECT, RESOURCE TO TRANSACTION_MGMT;

-- Crear tabla de usuarios
CREATE TABLE TRANSACTION_MGMT.ASYNCH_USERS (
    USER_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FULL_NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Crear tabla de cuentas
CREATE TABLE TRANSACTION_MGMT.ASYNCH_ACCOUNTS (
    ACCOUNT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    BALANCE NUMBER(15, 2) DEFAULT 0 CHECK (BALANCE >= 0),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES TRANSACTION_MGMT.ASYNCH_USERS(USER_ID) ON DELETE CASCADE
);

-- Crear tabla de transacciones
CREATE TABLE TRANSACTION_MGMT.ASYNCH_TRANSACTIONS (
    TRANSACTION_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    SOURCE_ACCOUNT_ID NUMBER,
    TARGET_ACCOUNT_ID NUMBER,
    AMOUNT NUMBER(15, 2) NOT NULL CHECK (AMOUNT > 0),
    STATUS VARCHAR2(20) DEFAULT 'PENDING' CHECK (STATUS IN ('PENDING', 'COMPLETED', 'FAILED')),
    UNIQUE_KEY VARCHAR2(255) UNIQUE NOT NULL, -- Para garantizar idempotencia
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (SOURCE_ACCOUNT_ID) REFERENCES TRANSACTION_MGMT.ASYNCH_ACCOUNTS(ACCOUNT_ID),
    FOREIGN KEY (TARGET_ACCOUNT_ID) REFERENCES TRANSACTION_MGMT.ASYNCH_ACCOUNTS(ACCOUNT_ID)
);

-- Índices para optimizar las consultas
CREATE INDEX IDX_ASYNCH_USERS_EMAIL ON TRANSACTION_MGMT.ASYNCH_USERS (EMAIL);
CREATE INDEX IDX_ASYNCH_ACCOUNTS_USER_ID ON TRANSACTION_MGMT.ASYNCH_ACCOUNTS (USER_ID);
CREATE INDEX IDX_ASYNCH_TRANSACTIONS_STATUS ON TRANSACTION_MGMT.ASYNCH_TRANSACTIONS (STATUS);

-- Procedimiento para realizar transferencias
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.PROCESS_TRANSFER(
    P_SOURCE_ACCOUNT_ID IN NUMBER,
    P_TARGET_ACCOUNT_ID IN NUMBER,
    P_AMOUNT IN NUMBER,
    P_UNIQUE_KEY IN VARCHAR2
) AS
    V_SOURCE_BALANCE NUMBER;
    V_TARGET_BALANCE NUMBER;
BEGIN
    -- Verificar idempotencia
    IF EXISTS (SELECT 1 FROM TRANSACTION_MGMT.ASYNCH_TRANSACTIONS WHERE UNIQUE_KEY = P_UNIQUE_KEY) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Transaction already processed.');
    END IF;

    -- Verificar balances
    SELECT BALANCE INTO V_SOURCE_BALANCE FROM TRANSACTION_MGMT.ASYNCH_ACCOUNTS WHERE ACCOUNT_ID = P_SOURCE_ACCOUNT_ID FOR UPDATE;
    IF V_SOURCE_BALANCE < P_AMOUNT THEN
        RAISE_APPLICATION_ERROR(-20002, 'Insufficient balance.');
    END IF;

    -- Actualizar balances
    UPDATE TRANSACTION_MGMT.ASYNCH_ACCOUNTS SET BALANCE = BALANCE - P_AMOUNT WHERE ACCOUNT_ID = P_SOURCE_ACCOUNT_ID;
    UPDATE TRANSACTION_MGMT.ASYNCH_ACCOUNTS SET BALANCE = BALANCE + P_AMOUNT WHERE ACCOUNT_ID = P_TARGET_ACCOUNT_ID;

    -- Registrar la transacción
    INSERT INTO TRANSACTION_MGMT.ASYNCH_TRANSACTIONS (
        SOURCE_ACCOUNT_ID, TARGET_ACCOUNT_ID, AMOUNT, STATUS, UNIQUE_KEY
    ) VALUES (
        P_SOURCE_ACCOUNT_ID, P_TARGET_ACCOUNT_ID, P_AMOUNT, 'COMPLETED', P_UNIQUE_KEY
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO TRANSACTION_MGMT.ASYNCH_TRANSACTIONS (
            SOURCE_ACCOUNT_ID, TARGET_ACCOUNT_ID, AMOUNT, STATUS, UNIQUE_KEY
        ) VALUES (
            P_SOURCE_ACCOUNT_ID, P_TARGET_ACCOUNT_ID, P_AMOUNT, 'FAILED', P_UNIQUE_KEY
        );
        RAISE;
END PROCESS_TRANSFER;

-- Procedimiento para depósitos
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.PROCESS_DEPOSIT(
    P_ACCOUNT_ID IN NUMBER,
    P_AMOUNT IN NUMBER,
    P_UNIQUE_KEY IN VARCHAR2
) AS
BEGIN
    -- Verificar idempotencia
    IF EXISTS (SELECT 1 FROM TRANSACTION_MGMT.ASYNCH_TRANSACTIONS WHERE UNIQUE_KEY = P_UNIQUE_KEY) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Transaction already processed.');
    END IF;

    -- Actualizar balance
    UPDATE TRANSACTION_MGMT.ASYNCH_ACCOUNTS SET BALANCE = BALANCE + P_AMOUNT WHERE ACCOUNT_ID = P_ACCOUNT_ID;

    -- Registrar la transacción
    INSERT INTO TRANSACTION_MGMT.ASYNCH_TRANSACTIONS (
        TARGET_ACCOUNT_ID, AMOUNT, STATUS, UNIQUE_KEY
    ) VALUES (
        P_ACCOUNT_ID, P_AMOUNT, 'COMPLETED', P_UNIQUE_KEY
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO TRANSACTION_MGMT.ASYNCH_TRANSACTIONS (
            TARGET_ACCOUNT_ID, AMOUNT, STATUS, UNIQUE_KEY
        ) VALUES (
            P_ACCOUNT_ID, P_AMOUNT, 'FAILED', P_UNIQUE_KEY
        );
        RAISE;
END PROCESS_DEPOSIT;

-- Procedimiento para retiros
CREATE OR REPLACE PROCEDURE TRANSACTION_MGMT.PROCESS_WITHDRAWAL(
    P_ACCOUNT_ID IN NUMBER,
    P_AMOUNT IN NUMBER,
    P_UNIQUE_KEY IN VARCHAR2
) AS
    V_BALANCE NUMBER;
BEGIN
    -- Verificar idempotencia
    IF EXISTS (SELECT 1 FROM TRANSACTION_MGMT.ASYNCH_TRANSACTIONS WHERE UNIQUE_KEY = P_UNIQUE_KEY) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Transaction already processed.');
    END IF;

    -- Verificar balance
    SELECT BALANCE INTO V_BALANCE FROM TRANSACTION_MGMT.ASYNCH_ACCOUNTS WHERE ACCOUNT_ID = P_ACCOUNT_ID FOR UPDATE;
    IF V_BALANCE < P_AMOUNT THEN
        RAISE_APPLICATION_ERROR(-20002, 'Insufficient balance.');
    END IF;

    -- Actualizar balance
    UPDATE TRANSACTION_MGMT.ASYNCH_ACCOUNTS SET BALANCE = BALANCE - P_AMOUNT WHERE ACCOUNT_ID = P_ACCOUNT_ID;

    -- Registrar la transacción
    INSERT INTO TRANSACTION_MGMT.ASYNCH_TRANSACTIONS (
        SOURCE_ACCOUNT_ID, AMOUNT, STATUS, UNIQUE_KEY
    ) VALUES (
        P_ACCOUNT_ID, P_AMOUNT, 'COMPLETED', P_UNIQUE_KEY
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        INSERT INTO TRANSACTION_MGMT.ASYNCH_TRANSACTIONS (
            SOURCE_ACCOUNT_ID, AMOUNT, STATUS, UNIQUE_KEY
        ) VALUES (
            P_ACCOUNT_ID, P_AMOUNT, 'FAILED', P_UNIQUE_KEY
        );
        RAISE;
END PROCESS_WITHDRAWAL;

-- Crear vista para auditoría
CREATE OR REPLACE VIEW TRANSACTION_MGMT.ASYNCH_AUDIT_LOG AS
SELECT 
    T.TRANSACTION_ID,
    T.SOURCE_ACCOUNT_ID,
    T.TARGET_ACCOUNT_ID,
    T.AMOUNT,
    T.STATUS,
    T.CREATED_AT,
    A1.BALANCE AS SOURCE_BALANCE,
    A2.BALANCE AS TARGET_BALANCE
FROM 
    TRANSACTION_MGMT.ASYNCH_TRANSACTIONS T
LEFT JOIN 
    TRANSACTION_MGMT.ASYNCH_ACCOUNTS A1 ON T.SOURCE_ACCOUNT_ID = A1.ACCOUNT_ID
LEFT JOIN 
    TRANSACTION_MGMT.ASYNCH_ACCOUNTS A2 ON T.TARGET_ACCOUNT_ID = A2.ACCOUNT_ID;

-- Crear un usuario dedicado para la aplicación
CREATE USER rabbitmq_app IDENTIFIED BY strong_password;

-- Otorgar permisos necesarios al usuario
GRANT CONNECT, RESOURCE TO rabbitmq_app;
GRANT CREATE SESSION, CREATE TABLE, CREATE SEQUENCE, CREATE PROCEDURE TO rabbitmq_app;

-- Usar el esquema del usuario
ALTER SESSION SET CURRENT_SCHEMA = rabbitmq_app;

-- Crear una tabla para almacenar mensajes
CREATE TABLE messages (
    id NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message_content CLOB NOT NULL,
    status VARCHAR2(20) DEFAULT 'PENDING' NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP
);

-- Crear una tabla para registrar eventos de RabbitMQ
CREATE TABLE rabbitmq_events (
    id NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type VARCHAR2(50) NOT NULL,
    event_message CLOB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Crear una secuencia para IDs personalizados (opcional)
CREATE SEQUENCE message_seq START WITH 1 INCREMENT BY 1;

-- Crear un procedimiento para registrar eventos en la tabla rabbitmq_events
CREATE OR REPLACE PROCEDURE log_rabbitmq_event (
    p_event_type IN VARCHAR2,
    p_event_message IN CLOB
) AS
BEGIN
    INSERT INTO rabbitmq_events (event_type, event_message)
    VALUES (p_event_type, p_event_message);
    COMMIT;
END;
/

-- Crear una vista para consultar los mensajes pendientes (opcional)
CREATE OR REPLACE VIEW pending_messages AS
SELECT id, message_content, created_at
FROM messages
WHERE status = 'PENDING';

-- Crear un índice en la columna de estado para acelerar búsquedas
CREATE INDEX idx_message_status ON messages (status);

-- Validar permisos para las tablas y objetos
GRANT SELECT, INSERT, UPDATE, DELETE ON messages TO rabbitmq_app;
GRANT SELECT, INSERT, UPDATE, DELETE ON rabbitmq_events TO rabbitmq_app;
GRANT EXECUTE ON log_rabbitmq_event TO rabbitmq_app;
